#!/usr/bin/zsh

################################################################################
#
#   Description:
#   ------------
#       Fetches all submodules from their respective remote repositories, and
#       shows a table that lists for each submodule : the latest available
#       version, the current version and a small visual cue to easily identify
#       mismatches between the two.
#
#   Usage:
#   ------
#       $> cd path/to/repo
#       $> git submodules-status
#
################################################################################

appendSpaces()
{
    INITIAL_STR=$1
    TARGET_LENGTH=$2

    SPACES_TO_APPEND=$((TARGET_LENGTH - ${#INITIAL_STR}))

    echo -n $INITIAL_STR
    for ((i = 0; i < $SPACES_TO_APPEND; i++))
    do
        echo -n " "
    done
    echo ""
}

# Confirm that we are in a git repository
GIT_TOP=$(git rev-parse --show-toplevel)
RC=$?
if [ $RC != "0" ]; then
    exit $RC
fi

git submodule foreach git remote update -p
echo ""

# Read the existing submodules information into an array. After this, the array
# should contain an even number of entries, with each pair of entries containing
# the submodule name and the current submodule version respectively.
ARR=(`git submodule | sed 's|^.*submodules/\(.*\) (\(.*\))$|\1 \2|g'`)

# Get the length of the longest submodule name
# Arrays indices in zsh start from 1
MAX_LEN=9 # Initialize to length of the header string "Submodule"
for ((i = 1; i < ${#ARR[@]}; i+=2))
do
    CUR_LEN=${#ARR[$i]}

    if [ $CUR_LEN -gt $MAX_LEN ]
    then
        MAX_LEN=$CUR_LEN
    fi
done

FIRST_COLUMN_WIDTH=$((MAX_LEN+4))

# For now, the width of the second column is hard-coded to 19
# i.e. length of the string "Current version" + 4
SECOND_COLUMN_WIDTH=19

# Also, the width of the third column is hard-coded to 12
# i.e. length of the string "Latest version" - 2
# so that the '✗' which indicates a difference between the two versions can
# appear as the last character of the "Latest version" column
THIRD_COLUMN_WIDTH=12

# Write the header row and its underlines
echo "$(appendSpaces "Submodule" $FIRST_COLUMN_WIDTH) Current version     Latest version"
echo "---------     ---------------     --------------"

# Write each submodule's data
for ((i = 1; i < ${#ARR[@]}; i+=2))
do
    cd submodules/${ARR[$i]}

    # LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
    LATEST_TAG=$(git tag --list "v*" --sort=v:refname | tail -1)

    cd -

    MISMATCH_CHARACTER=$([ "${ARR[$i+1]}" = "$LATEST_TAG" ] && echo " " || echo "✗")

    echo "$(appendSpaces ${ARR[$i]} $FIRST_COLUMN_WIDTH) $(appendSpaces ${ARR[$i+1]} $SECOND_COLUMN_WIDTH) $(appendSpaces $LATEST_TAG $THIRD_COLUMN_WIDTH) $MISMATCH_CHARACTER"
done
